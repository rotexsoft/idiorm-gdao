{"name":"Leanorm","tagline":"[WARNING NOT YET PRODUCTION READY: Should be ready in September 2015] A Generic Data Objects (GDAO https://github.com/rotexsoft/gdao ) implementation based on a stripped down (really minimal) version of idiorm.","body":"### Why another PHP ORM?\r\nThis package and its parent package [Generic Data Access Objects (GDAO)](https://github.com/rotexsoft/gdao) were birthed out of my experience working with some of the existing PHP ORMs like [Solar_Sql_Model](http://solarphp.com/apidoc/package.Solar_Sql_Model), [Paris](http://j4mie.github.io/idiormandparis/) and [Propel](http://propelorm.org/). I found Paris to be really lightweight and very performant when working with a lot of database records but I am not a huge fan of the **Active Record** pattern it's based on (I don't like having records that contain data, data access & manipulation logic and business logic; they become hard to maintain for large projects). I have been working on a web-app that's about 6 years old now. The Model layer for this application is powered by the Solar_Sql_Model ORM package and it's obviously a web-app powered by the [Solar PHP framework](http://solarphp.com/). The TableDataGateway and DataMapper patterns implemented in the Solar_Sql_Model package have worked really well for me especially with regards to organizing the code in the **Model** layer of the application (having Model classes (one per database table) that talk to the database, Record classes that hold each row of data retrieved from database tables and Collection classes that hold one or more instances of Record classes containing data associated with a database table). I began to run into some performance problems over time and I started looking for a more performant PHP Orm package to replace the Solar_Sql_Model package in the application. I looked at the Paris Orm, which is actually more performant than the Solar_Sql_Model package but was difficult to adapt to the existing Model layer architecture of my application since Paris is based on the **Active Record** pattern (where records contain data, data access & manipulation logic and business logic). Laravel's Eloquent was also out of the question; since it's also an **Active Record** implementation. Propel and Doctrine were too heavy for my needs (lots of functionality their code-bases that I may never use).\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}